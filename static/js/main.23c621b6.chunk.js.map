{"version":3,"sources":["redux/runButton/runButton.types.js","redux/timer/timer.actions.js","redux/runButton/runButton.action.js","utils/constants.js","components/Header.js","components/Cell.js","components/Board.js","components/App.js","utils/utils.js","redux/runButton/runButton.reducer.js","redux/rootReducer.js","index.js"],"names":["runButtonTypes","RUN_GAME","STOP_GAME","CLEAR_GAME","DRAG_TARGET","ADD_OBSTACLE","TOGGLE_ADD_OBSTACLE","CLEAR_OBSTACLES","SELECT_SEARCH_ALGORITHM","SELECT_MAZE_ALGORITHM","GENERATE_MAZE","stopTimer","type","STOP_TIMER","payload","name","toggleAddintObstacleState","selectSearchAlgorithm","algorithm","constants","N_HORIZONTAL_CELLS","N_VERTICAL_CELLS","START_X","START_Y","END_X","END_Y","CELL_SIZE","WIDTH","HEIGHT","SEARCH_OPTIONS","MAZE_OPTIONS","search_options","maze_options","Header","option","this","props","dispatch","label","isRunning","searchDone","isAddingObstacles","dispatchWhenStop","className","href","options","value","onChange","onClick","START_TIMER","action","interval","dispatchWhenClear","React","Component","connect","state","runButton","Cell","x","y","color","key","style","left","top","width","height","backgroundColor","Board","getBoardCoords","e","rect","boardRef","getBoundingClientRect","doc","document","documentElement","offset_x","window","pageXOffset","clientLeft","offset_y","pageYOffset","clientTop","clientX","clientY","updateTargetOnDrag","dragTarget","Math","floor","addObstacles","addObstacle","searchCells","path","target","obstacles","onMouseDown","onmousemove","onMouseUp","id","ref","n","backgroundSize","draggable","onDragEnd","length","map","pathCell","cell","row","r_index","ele","c_index","cells","newPos","newObstacle","App","runSearchAlgorithm","searchAlgorithm","BFS","DFS","AStarSearch","DijkstraSearch","dist","abs","neighbors","offsets","from","visited","dijkstra_dist","sort","cell1","cell2","i","j","offset","nx","ny","direc","new_dist","push","openSet","closedSet","gScore","fScore","cameFrom","current","generateAStarpath","shift","undefined","find","tmp_gScore","generatePath","prevCell","generateMaze","Array","start","random","openCells","index","nei","getNeighbors","splice","choice","maze","ic","jc","res","init_visited","init_path","init_obstacles","Number","POSITIVE_INFINITY","init_fScore","init_dist","init_cameFrom","INITIAL_STATE","foundTarget","mazeAlgorithm","visited_open","runButtonReducer","currentCells","result","concat","toBeReturned","currentPath","newx","newy","existing","rootReducer","combineReducers","middlewares","timerMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.23c621b6.chunk.js","sourcesContent":["const runButtonTypes = {\n  RUN_GAME: \"RUN_GAME\",\n  STOP_GAME: \"STOP_GAME\",\n  CLEAR_GAME: \"CLEAR_GAME\",\n  DRAG_TARGET: \"DRAG_TARGET\",\n  ADD_OBSTACLE: \"ADD_OBSTACLE\",\n  TOGGLE_ADD_OBSTACLE: \"TOGGLE_ADD_OBSTACLE\",\n  CLEAR_OBSTACLES: \"CLEAR_OBSTACLES\",\n  SELECT_SEARCH_ALGORITHM: \"SELECT_SEARCH_ALGORITHM\",\n  SELECT_MAZE_ALGORITHM: \"SELECT_MAZE_ALGORITHM\",\n  GENERATE_MAZE: \"GENERATE_MAZE\"\n};\n\nexport default runButtonTypes;\n","import { START_TIMER, STOP_TIMER } from \"redux-timer\";\nimport runButtonTypes from \"../runButton/runButton.types\";\n\nexport const stopTimer = () => ({\n  type: STOP_TIMER,\n  payload: {\n    name: \"timer\"\n  }\n});\n\nexport const startTimer = () => ({\n  type: START_TIMER,\n  payload: {\n    name: \"timer\",\n    action: runButtonTypes.RUN_GAME,\n    interval: 100\n  }\n});\n","import runButtonTypes from \"./runButton.types\";\n\nexport const toggleRunButton = () => ({\n  type: runButtonTypes.RUN_GAME\n});\n\nexport const toggleStopButton = () => ({\n  type: runButtonTypes.STOP_GAME\n});\n\nexport const toggleClearButton = () => ({\n  type: runButtonTypes.CLEAR_GAME\n});\n\nexport const dragTarget = newPos => ({\n  type: runButtonTypes.DRAG_TARGET,\n  payload: newPos\n});\n\nexport const toggleAddintObstacleState = () => ({\n  type: runButtonTypes.TOGGLE_ADD_OBSTACLE\n});\n\nexport const addObstacle = newObstacle => ({\n  type: runButtonTypes.ADD_OBSTACLE,\n  payload: newObstacle\n});\n\nexport const clearObstacles = () => ({\n  type: runButtonTypes.CLEAR_OBSTACLES\n});\n\nexport const selectSearchAlgorithm = algorithm => ({\n  type: runButtonTypes.SELECT_SEARCH_ALGORITHM,\n  payload: algorithm\n});\n\nexport const selectMazeAlgorithm = algorithm => ({\n  type: runButtonTypes.SELECT_MAZE_ALGORITHM,\n  payload: algorithm\n});\n\nexport const generateMaze = () => ({\n  type: runButtonTypes.GENERATE_MAZE\n});\n","const constants = {\n  N_HORIZONTAL_CELLS: 41,\n  N_VERTICAL_CELLS: 25,\n  START_X: 4,\n  START_Y: 10,\n  END_X: 24,\n  END_Y: 17,\n  CELL_SIZE: 20,\n  WIDTH: 820,\n  HEIGHT: 500,\n  SEARCH_OPTIONS: [\"BFS\", \"DFS\", \"A*\", \"Dijkstra\"],\n  MAZE_OPTIONS: [\"Prim\"]\n};\n\nexport default constants;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nimport { startTimer, stopTimer } from \"../redux/timer/timer.actions\";\nimport {\n  toggleStopButton,\n  toggleClearButton,\n  toggleAddintObstacleState,\n  clearObstacles,\n  selectSearchAlgorithm,\n  selectMazeAlgorithm,\n  generateMaze\n} from \"../redux/runButton/runButton.action\";\nimport constants from \"../utils/constants\";\n\nconst search_options = constants.SEARCH_OPTIONS;\nconst maze_options = constants.MAZE_OPTIONS;\n\nclass Header extends React.Component {\n  _onSelect(option) {\n    //console.log(option.label);\n    this.props.dispatch(selectSearchAlgorithm(option.label));\n  }\n  render() {\n    const { isRunning, dispatch, searchDone, isAddingObstacles } = this.props;\n    if (searchDone) {\n      dispatchWhenStop(this.props);\n    }\n    return (\n      <div className=\"ui secondary pointing menu\">\n        <a href=\"/\" className=\"item\">\n          Visualizer\n        </a>\n        <Dropdown\n          options={search_options}\n          value={search_options[0]}\n          onChange={option => {\n            this.props.dispatch(selectSearchAlgorithm(option.label));\n          }}\n        />\n        <Dropdown\n          options={maze_options}\n          value={maze_options[0]}\n          onChange={option => {\n            this.props.dispatch(selectMazeAlgorithm(option.label));\n          }}\n        />\n        <button\n          className=\"ui primary button\"\n          onClick={() => {\n            isRunning ? dispatchWhenStop(this.props) : dispatch(startTimer());\n          }}\n        >\n          {isRunning ? \"Stop!\" : \"Run!\"}\n        </button>\n        <button\n          className=\"ui primary button\"\n          onClick={() => {\n            dispatchWhenClear(this.props);\n          }}\n        >\n          Clear!\n        </button>\n        <button\n          className=\"ui primary button\"\n          onClick={() => {\n            this.props.dispatch(toggleAddintObstacleState());\n          }}\n        >\n          {isAddingObstacles ? \"Drag to add obstacles!\" : \"Add Obstacles!\"}\n        </button>\n        <button\n          className=\"ui primary button\"\n          onClick={() => {\n            this.props.dispatch(clearObstacles());\n          }}\n        >\n          Clear Obstacles!\n        </button>\n        <button\n          className=\"ui primary button\"\n          onClick={() => {\n            this.props.dispatch(generateMaze());\n          }}\n        >\n          Generate Maze!\n        </button>\n      </div>\n    );\n  }\n}\n\nconst dispatchWhenClear = props => {\n  props.dispatch(stopTimer());\n  props.dispatch(toggleClearButton());\n};\n\nconst dispatchWhenStop = props => {\n  props.dispatch(stopTimer());\n  props.dispatch(toggleStopButton());\n};\n\nconst mapStateToProps = state => ({\n  isRunning: state.runButton.isRunning,\n  searchDone: state.runButton.searchDone,\n  isAddingObstacles: state.runButton.isAddingObstacles\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from \"react\";\nimport \"./Cell.css\";\nimport constants from \"../utils/constants\";\n\nconst CELL_SIZE = constants.CELL_SIZE;\n\nclass Cell extends React.Component {\n  render() {\n    const { x, y, color, key } = this.props;\n    return (\n      <div\n        className=\"Cell\"\n        key={key}\n        style={{\n          left: `${x + 1}px`,\n          top: `${y + 1}px`,\n          width: `${CELL_SIZE - 1}px`,\n          height: `${CELL_SIZE - 1}px`,\n          backgroundColor: `${color}`\n        }}\n      ></div>\n    );\n  }\n}\n\nexport default Cell;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Board.css\";\nimport Cell from \"./Cell\";\nimport key from \"weak-key\";\nimport constants from \"../utils/constants\";\nimport {\n  dragTarget,\n  addObstacle,\n  toggleAddintObstacleState\n} from \"../redux/runButton/runButton.action\";\n\nconst CELL_SIZE = constants.CELL_SIZE;\nconst WIDTH = constants.WIDTH;\nconst HEIGHT = constants.HEIGHT;\nconst START_X = constants.START_X;\nconst START_Y = constants.START_Y;\n\nclass Board extends React.Component {\n  getBoardCoords = e => {\n    var rect = this.boardRef.getBoundingClientRect();\n    var doc = document.documentElement;\n    var offset_x = rect.left + window.pageXOffset - doc.clientLeft;\n    var offset_y = rect.top + window.pageYOffset - doc.clientTop;\n\n    var x = e.clientX - offset_x;\n    var y = e.clientY - offset_y;\n    return [x, y];\n  };\n  updateTargetOnDrag = e => {\n    const { dragTarget } = this.props;\n    var [x, y] = this.getBoardCoords(e);\n    dragTarget({\n      x: Math.floor(x / CELL_SIZE),\n      y: Math.floor(y / CELL_SIZE)\n    });\n  };\n\n  addObstacles = e => {\n    const { addObstacle, isAddingObstacles } = this.props;\n    if (isAddingObstacles) {\n      var [x, y] = this.getBoardCoords(e);\n      addObstacle({\n        x: Math.floor(x / CELL_SIZE),\n        y: Math.floor(y / CELL_SIZE)\n      });\n    }\n  };\n\n  render() {\n    const {\n      searchCells,\n      path,\n      target,\n      obstacles,\n      toggleAddintObstacleState,\n      isAddingObstacles\n    } = this.props;\n\n    return (\n      <div\n        onMouseDown={e => {\n          if (isAddingObstacles) {\n            this.addObstacles(e);\n            this.boardRef.onmousemove = this.addObstacles;\n          }\n        }}\n        onMouseUp={() => {\n          if (isAddingObstacles) {\n            this.boardRef.onmousemove = null;\n            toggleAddintObstacleState();\n          }\n        }}\n        className=\"Board\"\n        id=\"Board\"\n        ref={n => {\n          this.boardRef = n;\n        }}\n        style={{\n          width: WIDTH,\n          height: HEIGHT,\n          backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n        }}\n      >\n        <Cell\n          x={START_X * CELL_SIZE}\n          y={START_Y * CELL_SIZE}\n          key=\"START_CELL\"\n          color=\"white\"\n        ></Cell>\n\n        <div draggable=\"true\" onDragEnd={this.updateTargetOnDrag}>\n          <Cell\n            x={target.x * CELL_SIZE}\n            y={target.y * CELL_SIZE}\n            color=\"green\"\n            key=\"END_CELL\"\n          ></Cell>\n        </div>\n        {searchCells.length ? (\n          searchCells.map(pathCell =>\n            pathCell.x !== START_X || pathCell.y !== START_Y ? (\n              <Cell\n                x={pathCell.x * CELL_SIZE}\n                y={pathCell.y * CELL_SIZE}\n                key={key(pathCell)}\n              />\n            ) : (\n              <span></span>\n            )\n          )\n        ) : (\n          <span></span>\n        )}\n        {path.length ? (\n          path.map(cell => (\n            <Cell\n              x={cell.x * CELL_SIZE}\n              y={cell.y * CELL_SIZE}\n              key={key(cell)}\n              color=\"green\"\n            />\n          ))\n        ) : (\n          <span></span>\n        )}\n        {obstacles.map((row, r_index) =>\n          row.map((ele, c_index) =>\n            ele ? (\n              <Cell\n                x={c_index * CELL_SIZE}\n                y={r_index * CELL_SIZE}\n                color=\"grey\"\n              />\n            ) : (\n              <span></span>\n            )\n          )\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  searchCells: state.runButton.cells,\n  path: state.runButton.path,\n  target: state.runButton.target,\n  obstacles: state.runButton.obstacles,\n  isAddingObstacles: state.runButton.isAddingObstacles\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dragTarget: newPos => dispatch(dragTarget(newPos)),\n  addObstacle: newObstacle => dispatch(addObstacle(newObstacle)),\n  toggleAddintObstacleState: () => dispatch(toggleAddintObstacleState())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Board);\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Board from \"./Board\";\n\nconst App = () => {\n  return (\n    <div className=\"ui container\">\n      <div>\n        <Header />\n      </div>\n      <div>\n        <Board />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import constants from \"../utils/constants\";\n\nconst N_HORIZONTAL_CELLS = constants.N_HORIZONTAL_CELLS;\nconst N_VERTICAL_CELLS = constants.N_VERTICAL_CELLS;\nconst START_X = constants.START_X;\nconst START_Y = constants.START_Y;\nconst END_X = constants.END_X;\nconst END_Y = constants.END_Y;\n\nexport const runSearchAlgorithm = state => {\n  switch (state.searchAlgorithm) {\n    case \"BFS\":\n      return BFS(state);\n    case \"DFS\":\n      return DFS(state);\n    case \"A*\":\n      return AStarSearch(state);\n    case \"Dijkstra\":\n      return DijkstraSearch(state);\n    default:\n      return [[], false];\n  }\n};\n\nexport const dist = (x, y, target = { x: END_X, y: END_Y }) => {\n  //return Math.sqrt(\n  //  (x - target.x) * (x - target.x) + (y - target.y) * (y - target.y)\n  //);\n  return Math.abs(x - target.x) + Math.abs(y - target.y);\n};\n\nexport const cost = (x, y, target = { x: END_X, y: END_Y }) => {\n  return Math.sqrt(\n    (x - target.x) * (x - target.x) + (y - target.y) * (y - target.y)\n  );\n};\n\nexport const DijkstraSearch = state => {\n  var neighbors = [];\n\n  const offsets = [\n    { x: 0, y: 1, from: \"UP\" },\n    { x: 1, y: 0, from: \"LEFT\" },\n    { x: 0, y: -1, from: \"DOWN\" },\n    { x: -1, y: 0, from: \"RIGHT\" }\n  ];\n  const { cells, visited, target, obstacles, dijkstra_dist } = state;\n\n  cells.sort((cell1, cell2) =>\n    dijkstra_dist[cell1.y][cell1.x] > dijkstra_dist[cell2.y][cell2.x] ? 1 : -1\n  );\n\n  for (var i = 0; i < cells.length; i++) {\n    var cell = cells[i];\n    if (cell.x === target.x && cell.y === target.y) return [neighbors, true];\n    visited[cell.y][cell.x] = true;\n\n    for (var j = 0; j < offsets.length; j++) {\n      var offset = offsets[j];\n      var nx = offset.x + cell.x;\n      var ny = offset.y + cell.y;\n      var direc = offset.from;\n      if (\n        nx >= 0 &&\n        ny >= 0 &&\n        ny < N_VERTICAL_CELLS &&\n        nx < N_HORIZONTAL_CELLS\n      ) {\n        if (!visited[ny][nx] && !obstacles[ny][nx]) {\n          const new_dist = dijkstra_dist[cell.y][cell.x] + 1;\n          if (new_dist < dijkstra_dist[ny][nx]) {\n            dijkstra_dist[ny][nx] = new_dist;\n            neighbors.push({ x: nx, y: ny, from: direc });\n            if (nx === target.x && ny === target.y) return [neighbors, true];\n            return [neighbors, false];\n          }\n        }\n      }\n    }\n  }\n  return [neighbors, false];\n};\n\nexport const AStarSearch = state => {\n  const offsets = [\n    { x: 0, y: 1, from: \"UP\" },\n    { x: 1, y: 0, from: \"LEFT\" },\n    { x: 0, y: -1, from: \"DOWN\" },\n    { x: -1, y: 0, from: \"RIGHT\" }\n  ];\n\n  const {\n    target,\n    obstacles,\n    openSet,\n    closedSet,\n    gScore,\n    fScore,\n    cameFrom\n  } = state;\n\n  if (openSet.length > 0) {\n    openSet.sort((cell1, cell2) =>\n      fScore[cell1.y][cell1.x] > fScore[cell2.y][cell2.x] ? 1 : -1\n    );\n    var current = openSet[0];\n    if (current.x === target.x && current.y === target.y) {\n      const path = generateAStarpath(cameFrom, current);\n      return [openSet, closedSet, true, path];\n    }\n\n    openSet.shift();\n    closedSet.push(current);\n\n    for (var j = 0; j < offsets.length; j++) {\n      var offset = offsets[j];\n      var nx = offset.x + current.x;\n      var ny = offset.y + current.y;\n      var direc = offset.from;\n      if (\n        nx >= 0 &&\n        ny >= 0 &&\n        ny < N_VERTICAL_CELLS &&\n        nx < N_HORIZONTAL_CELLS\n      ) {\n        const existing = closedSet.find(cell => cell.x === nx && cell.y === ny);\n        if (existing !== undefined || obstacles[ny][nx]) continue;\n        const tmp_gScore = gScore[current.y][current.x] + 1;\n        const existInOpen = openSet.find(\n          cell => cell.x === nx && cell.y === ny\n        );\n        if (existInOpen === undefined)\n          openSet.push({ x: nx, y: ny, from: direc });\n        if (tmp_gScore < gScore[ny][nx]) {\n          //cameFrom[{ x: nx, y: ny }] = direc;\n          //cameFrom.set({ x: nx, y: ny }, direc);\n          cameFrom[ny][nx] = direc;\n          gScore[ny][nx] = tmp_gScore;\n          fScore[ny][nx] =\n            gScore[ny][nx] +\n            dist(nx, ny, {\n              x: target.x,\n              y: target.y\n            });\n        }\n        if (nx === target.x && ny === target.y) {\n          const path = generateAStarpath(cameFrom, target);\n          return [openSet, closedSet, true, path];\n        }\n      }\n    }\n  }\n  return [openSet, closedSet, false, []];\n};\n\nexport const DFS = state => {\n  var neighbors = [];\n\n  const offsets = [\n    { x: 0, y: 1, from: \"UP\" },\n    { x: 1, y: 0, from: \"LEFT\" },\n    { x: 0, y: -1, from: \"DOWN\" },\n    { x: -1, y: 0, from: \"RIGHT\" }\n  ];\n  const { cells, visited, target, obstacles } = state;\n\n  if (cells.length) {\n    var cell = cells[cells.length - 1];\n    if (cell.x === target.x && cell.y === target.y) return [neighbors, true];\n    for (var j = 0; j < offsets.length; j++) {\n      var offset = offsets[j];\n      var nx = offset.x + cell.x;\n      var ny = offset.y + cell.y;\n      var direc = offset.from;\n      if (\n        nx >= 0 &&\n        ny >= 0 &&\n        ny < N_VERTICAL_CELLS &&\n        nx < N_HORIZONTAL_CELLS\n      ) {\n        if (!visited[ny][nx] && !obstacles[ny][nx]) {\n          visited[ny][nx] = true;\n          neighbors.push({ x: nx, y: ny, from: direc });\n          if (nx === target.x && ny === target.y) return [neighbors, true];\n          return [neighbors, false];\n        }\n      }\n    }\n  }\n  return [neighbors, false];\n};\n\nexport const BFS = state => {\n  var neighbors = [];\n  const offsets = [\n    { x: 0, y: 1, from: \"UP\" },\n    { x: 0, y: -1, from: \"DOWN\" },\n    { x: 1, y: 0, from: \"LEFT\" },\n    { x: -1, y: 0, from: \"RIGHT\" }\n  ];\n  const { cells, visited, target, obstacles } = state;\n  for (var i = 0; i < cells.length; i++) {\n    var cell = cells[i];\n    if (cell.x === target.x && cell.y === target.y) return [neighbors, true];\n\n    for (var j = 0; j < offsets.length; j++) {\n      var offset = offsets[j];\n      var nx = cell.x + offset.x;\n      var ny = cell.y + offset.y;\n      var direc = offset.from;\n      if (\n        nx >= 0 &&\n        ny >= 0 &&\n        ny < N_VERTICAL_CELLS &&\n        nx < N_HORIZONTAL_CELLS\n      ) {\n        if (!visited[ny][nx] && !obstacles[ny][nx]) {\n          visited[ny][nx] = true;\n          neighbors.push({ x: nx, y: ny, from: direc });\n          if (nx === target.x && ny === target.y) {\n            return [neighbors, true];\n          }\n        }\n      }\n    }\n  }\n\n  return [neighbors, false];\n};\n\nexport const generateAStarpath = (cameFrom, target) => {\n  var path = [];\n  var current = { x: target.x, y: target.y };\n  while (current.x !== START_X || current.y !== START_Y) {\n    path.push({ x: current.x, y: current.y });\n    switch (cameFrom[current.y][current.x]) {\n      case \"UP\":\n        current.y = current.y - 1;\n        break;\n      case \"DOWN\":\n        current.y = current.y + 1;\n        break;\n      case \"LEFT\":\n        current.x = current.x - 1;\n        break;\n      case \"RIGHT\":\n        current.x = current.x + 1;\n        break;\n      default:\n        break;\n    }\n  }\n  path.push({ x: START_X, y: START_Y, from: \"START\" });\n  return path;\n};\n\nexport const generatePath = (cells, target) => {\n  var current = { x: target.x, y: target.y, from: \"END\" };\n\n  var path = [];\n  while (current.x !== START_X || current.y !== START_Y) {\n    path.push({ x: current.x, y: current.y, from: current.from });\n    switch (current.from) {\n      case \"UP\":\n        current.y = current.y - 1;\n        break;\n      case \"DOWN\":\n        current.y = current.y + 1;\n        break;\n      case \"LEFT\":\n        current.x = current.x - 1;\n        break;\n      case \"RIGHT\":\n        current.x = current.x + 1;\n        break;\n      default:\n        break;\n    }\n    const prevCell = cells.find(\n      cell => cell.x === current.x && cell.y === current.y\n    );\n    if (prevCell) {\n      current.from = prevCell.from;\n    } else {\n      break;\n    }\n  }\n\n  path.push({ x: START_X, y: START_Y, from: \"START\" });\n  return path;\n};\n\nexport const generateMaze = state => {\n  // https://github.com/professor-l/mazes/blob/master/scripts/prims.js\n  var width = N_VERTICAL_CELLS;\n  var height = N_HORIZONTAL_CELLS;\n  var obstacles = Array.from({ length: width }, () =>\n    Array.from({ length: height }, () => true)\n  );\n  var start = [];\n  do {\n    start[0] = Math.floor(Math.random() * width);\n  } while (start[0] % 2 == 0);\n  do {\n    start[1] = Math.floor(Math.random() * height);\n  } while (start[1] % 2 == 0);\n  obstacles[START_Y][START_X] = false;\n  var openCells = [start];\n\n  while (openCells.length) {\n    var index = Math.floor(Math.random() * openCells.length);\n    var cell = openCells[index];\n    var nei = getNeighbors(obstacles, cell[0], cell[1]);\n\n    while (nei.length == 0) {\n      openCells.splice(index, 1);\n      if (openCells.length == 0) break;\n      index = Math.floor(Math.random() * openCells.length);\n      cell = openCells[index];\n      nei = getNeighbors(obstacles, cell[0], cell[1]);\n    }\n    if (openCells.length == 0) break;\n\n    var choice = nei[Math.floor(Math.random() * nei.length)];\n    openCells.push(choice);\n    if (nei.length == 1) openCells.splice(index, 1);\n\n    obstacles[choice[0]][choice[1]] = false;\n    obstacles[(choice[0] + cell[0]) / 2][(choice[1] + cell[1]) / 2] = false;\n  }\n  obstacles[state.target.y][state.target.x] = false;\n  return obstacles;\n};\n\nconst getNeighbors = (maze, ic, jc) => {\n  var res = [];\n  for (var i = 0; i < 4; i++) {\n    var nei = [ic, jc];\n    nei[i % 2] += Math.floor(i / 2) * 2 || -2;\n    if (\n      nei[0] < maze.length &&\n      nei[1] < maze[0].length &&\n      nei[0] >= 0 &&\n      nei[1] >= 0\n    ) {\n      if (maze[nei[0]][nei[1]] == true) res.push(nei);\n    }\n  }\n  return res;\n};\n","import runButtonTypes from \"./runButton.types\";\nimport {\n  runSearchAlgorithm,\n  generatePath,\n  dist,\n  generateMaze\n} from \"../../utils/utils\";\nimport constants from \"../../utils/constants\";\n\nconst N_HORIZONTAL_CELLS = constants.N_HORIZONTAL_CELLS;\nconst N_VERTICAL_CELLS = constants.N_VERTICAL_CELLS;\nconst START_X = constants.START_X;\nconst START_Y = constants.START_Y;\nconst END_X = constants.END_X;\nconst END_Y = constants.END_Y;\nvar init_visited = Array.from({ length: N_VERTICAL_CELLS }, () =>\n  Array.from({ length: N_HORIZONTAL_CELLS }, () => false)\n);\n\nvar init_path = [];\nvar init_obstacles = Array.from({ length: N_VERTICAL_CELLS }, () =>\n  Array.from({ length: N_HORIZONTAL_CELLS }, () => false)\n);\n\nvar init_gScore = Array.from({ length: N_VERTICAL_CELLS }, () =>\n  Array.from({ length: N_HORIZONTAL_CELLS }, () => Number.POSITIVE_INFINITY)\n);\ninit_gScore[START_Y][START_X] = 0;\nvar init_fScore = Array.from({ length: N_VERTICAL_CELLS }, () =>\n  Array.from({ length: N_HORIZONTAL_CELLS }, () => Number.POSITIVE_INFINITY)\n);\ninit_fScore[START_Y][START_X] = dist(START_X, START_Y);\n\nvar init_dist = Array.from({ length: N_VERTICAL_CELLS }, () =>\n  Array.from({ length: N_HORIZONTAL_CELLS }, () => Number.POSITIVE_INFINITY)\n);\ninit_dist[START_Y][START_X] = 0;\n\nvar init_cameFrom = Array.from({ length: N_VERTICAL_CELLS }, () =>\n  Array.from({ length: N_HORIZONTAL_CELLS }, () => \"INIT\")\n);\ninit_cameFrom[START_Y][START_X] = \"START\";\ninit_cameFrom[END_Y][END_X] = \"END\";\n\nconst INITIAL_STATE = {\n  target: { x: END_X, y: END_Y },\n  isRunning: false,\n  searchDone: false,\n  foundTarget: false,\n  searchAlgorithm: \"BFS\",\n  mazeAlgorithm: \"Prim\",\n  cells: [\n    {\n      x: START_X,\n      y: START_Y,\n      from: \"START\"\n    }\n  ],\n  fScore: init_fScore.map(row => [...row]),\n  gScore: init_fScore.map(row => [...row]),\n  openSet: [{ x: START_X, y: START_Y, from: \"START\" }],\n  closedSet: [],\n  cameFrom: init_cameFrom.map(row => [...row]),\n  dijkstra_dist: init_dist.map(row => [...row]),\n  path: init_path.map(cell => cell),\n  isAddingObstacles: false,\n  obstacles: init_obstacles.map(row => [...row]),\n  visited: init_visited.map(row => [...row]),\n  visited_open: init_visited.map(row => [...row])\n};\n\nconst runButtonReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case runButtonTypes.RUN_GAME:\n      //const [neighbors, foundTarget] = BFS(state);\n      var openSet = [];\n      var closedSet = [];\n      var foundTarget = false;\n      var neighbors = [];\n      var currentCells = [];\n      var path = [];\n      const result = runSearchAlgorithm(state);\n      if (result.length > 2) {\n        [openSet, closedSet, foundTarget, path] = result;\n        currentCells = openSet.concat(closedSet);\n        neighbors = openSet.concat(closedSet);\n      } else {\n        [neighbors, foundTarget] = result;\n        currentCells = state.cells.concat(neighbors);\n      }\n      //const [neighbors, foundTarget] = runSearchAlgorithm(state);\n      //currentCells = state.cells.concat(neighbors);\n      const { target } = state;\n\n      var toBeReturned = {\n        ...state,\n        isRunning: true,\n        searchDone: false,\n        foundTarget: false,\n        isAddingObstacles: false,\n        searchAlgorithm: state.searchAlgorithm,\n        openSet: openSet,\n        closedSet: closedSet,\n        path: state.path,\n        cells: currentCells,\n        visited: state.visited.map(row => [...row])\n      };\n\n      if (neighbors.length === 0 || foundTarget) {\n        toBeReturned.searchDone = true;\n        if (foundTarget) {\n          toBeReturned.foundTarget = true;\n          var currentPath = generatePath(currentCells, target);\n\n          toBeReturned.path = state.path.concat(currentPath);\n          if (result.length > 2) toBeReturned.path = path;\n        }\n      }\n      return toBeReturned;\n\n    case runButtonTypes.STOP_GAME:\n      return {\n        ...state,\n        isRunning: false\n      };\n    case runButtonTypes.CLEAR_GAME:\n      return {\n        ...state,\n        isRunning: false,\n        searchDone: false,\n        foundTarget: false,\n        searchAlgorithm: \"BFS\",\n        cells: [\n          {\n            x: START_X,\n            y: START_Y,\n            from: \"START\"\n          }\n        ],\n        fScore: init_fScore.map(row => [...row]),\n        gScore: init_fScore.map(row => [...row]),\n        openSet: [{ x: START_X, y: START_Y, from: \"START\" }],\n        closedSet: [],\n        cameFrom: init_cameFrom.map(row => [...row]),\n        dijkstra_dist: init_dist.map(row => [...row]),\n        path: init_path.map(cell => cell),\n        isAddingObstacles: false,\n        obstacles: init_obstacles.map(row => [...row]),\n        visited: init_visited.map(row => [...row]),\n        visited_open: init_visited.map(row => [...row])\n      };\n    case runButtonTypes.DRAG_TARGET:\n      var newx = action.payload.x;\n      var newy = action.payload.y;\n      if (newx < 0) newx = 0;\n      if (newx >= N_HORIZONTAL_CELLS) newx = N_HORIZONTAL_CELLS - 1;\n      if (newy < 0) newy = 0;\n      if (newy >= N_VERTICAL_CELLS) newy = N_VERTICAL_CELLS - 1;\n      return {\n        ...state,\n        target: { x: newx, y: newy }\n      };\n    case runButtonTypes.ADD_OBSTACLE:\n      var newx = action.payload.x;\n      var newy = action.payload.y;\n      if (\n        newx >= 0 &&\n        newx < N_HORIZONTAL_CELLS &&\n        newy >= 0 &&\n        newy < N_VERTICAL_CELLS\n      ) {\n        const existing = state.obstacles[newy][newx];\n        if (!existing) {\n          state.obstacles[newy][newx] = true;\n          return {\n            ...state,\n            obstacles: state.obstacles.map(row => [...row])\n          };\n        }\n        return state;\n      }\n    case runButtonTypes.TOGGLE_ADD_OBSTACLE:\n      return {\n        ...state,\n        isAddingObstacles: !state.isAddingObstacles\n      };\n    case runButtonTypes.CLEAR_OBSTACLES:\n      return {\n        ...state,\n        obstacles: init_obstacles.map(row => [...row])\n      };\n    case runButtonTypes.SELECT_SEARCH_ALGORITHM:\n      return {\n        ...state,\n        searchAlgorithm: action.payload\n      };\n    case runButtonTypes.SELECT_MAZE_ALGORITHM:\n      return {\n        ...state,\n        mazeAlgorithm: action.payload\n      };\n    case runButtonTypes.GENERATE_MAZE:\n      return {\n        ...state,\n        obstacles: generateMaze(state)\n      };\n    default:\n      return state;\n  }\n};\n\nexport default runButtonReducer;\n","import { combineReducers } from \"redux\";\n\nimport runButtonReducer from \"./runButton/runButton.reducer\";\n\nconst rootReducer = combineReducers({\n  runButton: runButtonReducer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./redux/rootReducer\";\nimport logger from \"redux-logger\";\nimport timerMiddleware from \"redux-timer\";\n\nconst middlewares = [timerMiddleware];\nif (process.env.NODE_ENV === \"development\") {\n  middlewares.push(logger);\n}\n\n//const store = createStore(rootReducer, applyMiddleware(...middlewares));\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}